#Браузер 
— это движок рендеринга. 
Его работа заключается в том, чтобы загрузить веб-страницу и 
представить её в понятном для человека виде.

##Что происходит в браузере в момент когда пользователь набрал адресс сайта, нажал enter
и до момента отображения страницы на экране.
    
        Браузер получает адресс, в котором есть:
    Протокол http/https;
    Хост, по которому нужно сделать обращение. Хост представленн доменным именем.
    Адрес ресурса который нужно получить на веб сервере. 
Он можеть быть как реальным находиться на физичиской файловой системе. 
Так и виртуальным т.е по каким-то правилам веб сервер должен выдать результат.
    Далее после того как браузер сделал разбор адреса он на основе хоста 
получает Ip-адрес сервера, где расположен веб сервер. Для этого нужно сделать resolve 
доменного имени в Ip-адрес и для этого используется DNS. Если ранее этот адрес использовался,
то запроса к DNS-у не делается т.к он берется из локального кэша, если нет, то кэшируется.
    По IP-адресу устанавливается TCP-соединение. TCP-соединение отличается от UDP-соединения, тем что
соединение осуществвляется с подтверждением получения информации, а UDP не ожидает получения информации.
Если в TCP подтверждения не получено, то информация отправляется заного. Порт по которому 
должно быть установлено соединение для HTTP - 80-ый, а для https - 443-ий.
    После того как установлено соединение что это значит - при TCP-соединение происходит обмен пакетами 
с флагами:
AСK - Acknowledgement number номер подтверждения.
SYN - Sequence number порядковый номер. Позволяет контролировать порядок сообщений.
FIN - Finish для прекращения соединения.
    A так же если соединене просиходит по HTTPS, то идет TLS HANDSHAKE так называемое рукопожатие т.е.
обмен сертификатами, проверка подлинности сертификатов, обмен публичными ключами - устанавливается 
доверенное соелинение на основе сертификатов.
        Далее формируем HTTP-заголовок:
    Первая строчка содержит название метода:
    GET - запрашивает представление ресурса. Запросы с использованием GET метода могут только извлекать данные;
    HEAD - запрашивает ресурс, но без тела ответа;
    POST - используется для отправки сущностей к определённому ресурсу;
    PUT - заменяет все текущие представления ресурса данными запроса; 
    DELETE - удаляет указанный ресурс;
    CONNECT - запускает двустороннюю связь с запрошенным ресурсом 
    OPTIONS - используется для описания параметров соединения с ресурсом;
    TRACE - выполняет вызов возвращаемого тестового сообщения с ресурса; 
    PATCH - используется для частичного изменения ресурса;
расположение ресурса, который мы хотим получить, а так же версия протокола которая испльзуется клиентом.

До версии 1.0 не было поддержки виртуальных хостов веб серверов(вебсервера разделенные по хостам) 
поэтому нельзя было указать такой заголовок как:
    Host : (имя сервера, который как правило совпадает с доменным именем)
Так же есть протокол версии 2.0, 
а у google SPDY(speedy) - Основной задачей SPDY заявлялось снижение времени загрузки веб-страниц и их элементов. 
Это достигается за счёт расстановки приоритетов и мультиплексирования передачи нескольких файлов таким образом, чтобы требовалось только одно соединение для каждого клиента.
    Connection: close - некоторые браузеры умеют делать percictance соеденение
    
    После того как мы сформирвали и получили ответ:
Ответом является информация о том что произошла ошибка, различые статус коды:
В случае успеха приходит заголовок со статус кодом 200 и html страница.
    Далее браузер берет html страницу и делает парсинг:
Html достаточно сложный язык и страница как правило не парсится в один проход...
Лексический анализ - кога ввыделяются ликсемы и токены;
Синтаксический анализ - проверяется правильность верстки(правильность самого языка);
Формирование дерева распарсенных элементов:
При парсинге html-я создается DOM и CSS-COM, а так же rendering-tree с набором элементов благодаря которому делается отображение 
Все это делается в внесколько проходов и если на веб странцице есть скрипты, то они могут изменять:
    положение элементов
    их размер
Для этого дополнитльно запускаются процессы reflow и read row.

    Далее на основе парсинга отображается страница пользователю.

    
    
    
    
    Разрешение DNS
    Браузер связывается с DNS-сервером и обнаруживает, что 
google.com соответствует IP-адресу 216.58.207.110, к которому может подключиться браузер;
    HTTP-обмен
    Как только браузер определит, какой сервер будет обслуживать наш запрос, 
он установит с ним TCP-соединение и начнет HTTP-обмен. 
    Рендеринг
    Последним по счёту, идет процесс рендеринга. В теле ответа сервер включает 
представление запрашиваемого документа в соответствии с заголовком Content-Type. 
В нашем случае тип содержимого был установлен на text/html, 
поэтому мы ожидаем HTML-разметку в ответе — и именно ее мы и находим в теле документа.

    Браузер считывает и анализирует HTML-код, загружает дополнительные ресурсы, 
включенные в разметку (например, там могут быть указаны для подгрузки JavaScript-файлы или CSS-документы) и представляет их пользователю.


    Разрешение DNS - Этот процесс помогает браузеру узнать, к какому серверу он должен подключиться, 
когда пользователь вводит URL. 
    HTTP-обмен - это не что иное, как способ общения браузера с нужным ему сервером, 
а для сервера — способ отвечать на запросы браузера. HTTP-обмен подразумевает, 
что клиент (наш браузер) отправляет запрос, а сервер присылает ответ.