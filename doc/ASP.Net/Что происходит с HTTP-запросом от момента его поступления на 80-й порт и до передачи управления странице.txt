#Что происходит с HTTP-запросом от момента его поступления на 80-й порт и до передачи управления странице
##IIS
    В первую очередь начинает работу веб-сервер IIS(Internet Information Services) от Microsoft. 
При поступлении HTTP запроса драйвер HTTP.SYS ядра Windows анализирует комбинацию URL/port number/IP address, 
сопоставляет их и перенаправляет зарегистрированному приложению, которое может быть как 
веб-сайтом IIS, так и виртуальным каталогом внутри веб-сайта IIS.
    Приложения ASP.NET MVC основаны на ASP.NET, необходимо включить ASP.NET в одном из в двух управляемых конвейерных режимах (managed pipeline modes):
    С помощью расширения ISAPI (aspnet_isapi.dll), ассоциированного с определенными расширениями файлов из URL адреса,
например, .aspx; .ashx; .mvc. Или без ассоциации с определенным расширением и тогда aspnet_isapi.dll будет обрабатывать 
все запросы, несмотря на расширение файлов.
    В интегрированном режиме, который поддерживается IIS 7+ .NET является естестввенной частью конвейера обработки запросов, 
поэтому не нужно использовать расширение ISAPI, ассоциированное с расширениями файлов. 
Именно это делает легким использование маршрутизации с чистыми URL адресами без расширений имен файлов.

    В общем как только система ASP.NET принимает входящий запрос, она оповещает все 
зарегистрированные модули HTTP о том, что пришел новый запрос. 
Модуль HTTP – это класс .NET, реализующий интерфейс IHttpModule.
    Начальной точкой всей системы маршрутизации core routing system является UrlRoutingModule.
Этот модуль зарегестрирован по умолчанию во всех приложениях ASP.NET MVC. В IIS 6 модуль UrlRoutingModule регистрируется в файле web.config.

##МАРШРУТИЗАЦИЯ (CORE ROUTING)
    Когда модуль UrlRoutingModule вступает в обработку запроса, он запускает систему маршрутизации System.Web.Routing. 
Задача маршрутизации состоит в том, чтобы распознать и проанализировать входящий URL и заполнить контекст запроса (request context), 
который могут использовать последующие компоненты, например, ASP.NET MVC использует его для передачи управления 
соответствующему контроллеру MVC и заполнения параметров методов действий.
    Система маршрутизации в первую очередь проверяет, соответствует ли входящий URL какому-то файлу на диске. 
Если да, то маршрутизация завершается и IIS продолжает обработку запроса. 
Для статичных файлов, таких как .gif, .jpeg, .png, .css или .js 
это значит, что IIS будет обрабатывать их стандартным способом, т.к. они существуют на диске.
Подобно этому, традиционные страницы ASP.NET WebForms (.aspx) будут обработаны обычным способом.
    Однако, если входящий URL не соответствует файлу на диске, например, запросы к контроллерам MVC, 
которые являются классами .NET, а не файлами, тогда система маршрутизации исследует 
текущую конфигурацию для того, чтобы определить как обработать входящий URL.

    В системе маршрутизации есть Таблица маршрутизации, которая хранится в статичной коллекции RouteTable. 
Каждая запись в коллекции представляет собой шаблон для допустимых URL адресов. 
В шаблон могут опционально входить необязательные заполнители, например, /blog/{year}/{entry}) и ограничения (constraints), 
которые ограничивают диапазон допустимых значений для каждого из параметров. 
Каждая запись указывает на обработчик маршрута (route handler) – объект, реализующий интерфейс IRouteHandler, который принимает и обрабатывает запрос. 
Для того, чтобы заполнить коллекцию RouteTable.Routes, нужно добавить соответствующий код в метод RegisterRoutes() файла Global.asax.cs.
    Для поиска соответствия запроса HTTP конкретному маршруту из RouteTable.Routes, 
система маршрутизации начинает сканировать коллекцию RouteTable.Routes сверху вниз и выбирает первый найденный маршрут, 
соответствующий входящему запросу. Найдя его, система маршрутизации передает управление обработчику маршрута, 
обеспечивая его контекстом запроса, описывающим выбранный маршрут и все параметры URL адреса.

##КОНТРОЛЛЕРЫ И ДЕЙСТВИЯ (CONTROLLERS AND ACTIONS)


















